User

id
username
email
password
efficiency 

User_Schedule

id
user_id
list_process
week_list_process
slots
parameters
week_parameters
algo
schedule
efficiency
day
week
timestamp


Process

id
capacity
period
arrival_time
deadline
type
optional
start_timing_flag
start_timing




/user - GET
/user/login - GET and POST
/user/logout - POST 
/user/signup - GET and POST 
/process - GET and POST
/process/process_id - GET and POST
/schedule - GET
/schedule/user_id - GET and POST
/schedule/user_id/week - GET and POST
/schedule/user_id/week/day - GET and POST
/schedule/efficiency/user_id - GET and POST
/schedule/efficiency/user_id/week - GET and POST
/schedule/efficiency/user_id/week/day - GET and POST 
/schedule/list_process/user_id - GET and POST
/schedule/parameters/user_id - GET and POST



user login/signup(GET and POST) -> efficiency (GET request total_efficiency/day_efficiency/week_efficiency ki) -> add slots to the database(POST/ purane slots GET) -> add task (dikhenge purane tasks GET/ POST) ->  GET parameters for the user(POST/ purane parameters GET) -> make schedule button (POST request) -> schedule for the rest of the week( GET schedule for the rest of the week) -> task finish (POST request for tasks completed, updating efficiency of day, week and total/ GET remaining tasks) -> finish schedule -> logout






1. user login/signup(GET and POST)
2. efficiency (GET request total_efficiency/day_efficiency/week_efficiency ki) 
3. add slots to the database(POST/ purane slots GET)
4. add task (dikhenge purane tasks GET/ POST)
5. show parameters for the user(POST/ purane parameters GET)
5.1 select tasks to be scheduled
6. make schedule button (POST request)
7. schedule for the rest of the week( GET schedule for the rest of the week)
8. task finish (POST request for tasks completed, updating efficiency of day, week and total/ GET remaining tasks)
9. finish schedule 
10. logout


USER 

id
username
email
password


EFFICIENCY 

id 
user_id 
day_efficiency 
week_efficiency 
total_efficiency 

SLOTS

id 
user_id
slots (dictionary)

PROCESS 

id
capacity
period
arrival_time
deadline
type
optional
start_timing_flag
start_timing

PARAMETERS

id 
user_id 
parameters (dictionary)

SCHEDULE 

id
user_id 
slot_id
list_process (process, status, percentage)
parameter_id 
algo 
schedule
week 
day 
efficiency 



/user - GET -- done
/user/user_id - GET -- done
/user/login - GET and POST
/user/logout - POST
/user/signup - GET and POST 
/process - GET and POST -- done
/process/<process_id> - GET -- done
/process/<user_id> - GET and POST -- not required
/process/<user_id>/<process_id> - GET -- not required
/efficiency/<user_id> - GET -- done
/efficiency/<user_id>/<day> - GET -- not required
/efficiency/<user_id>/<week> - GET -- not required
/slot/<user_id> - GET and POST
/parameters/<user_id> - GET and POST
/schedule/<user_id>/<slot_id>/<parameter_id>/<list_process> - GET and POST
/schedule/<user_id>/ - GET and POST 



making the new model for building and maintaining the schedule of a person 

schedule

id
user_id 
slot_id 
parameter_id
list_process


